import 'package:advanced_todo_app/core/error/exception.dart';
import 'package:advanced_todo_app/features/auth/data/models/user_model.dart';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

abstract interface class AuthRemoteDataSource {
  Session? get currentUserSession;
  Future<UserModel>signUpwithEmailPasswd({
    required String name,
    required String email,
    required String password,
  });
  Future<UserModel>loginwithEmailPasswd({
    required String email,
    required String password,
  });
  Future<UserModel?>getCurrentUserData();
}

class AuthRemoteDataSourceimpl implements AuthRemoteDataSource{
  final SupabaseClient supabaseClient;//we are creating here instance of client for the dependency injection
  //implementation so u can use firebase or anyother base here easily
  AuthRemoteDataSourceimpl(this.supabaseClient);

   @override
  Session? get currentUserSession => supabaseClient.auth.currentSession;//?->means it can be nullable

  @override
  Future<UserModel> loginwithEmailPasswd({required String email, required String password})async {
    try{
      final response=await supabaseClient.auth.signInWithPassword(password: password,email: email);
      debugPrint('''
      Login Response:
      User: ${response.user?.id}
      Session: ${response.session != null}
      ''');

      if (response.user == null) {
        if (response.session != null) {
          // User is authenticated but might need email verification
          return UserModel.fromJson(response.user!.toJson());
        }
        throw ServerException("User registration incomplete - check email verification");
      }
      return UserModel.fromJson(response.user!.toJson());//id is automatically generated by supabase
    }catch(e){
        throw ServerException(e.toString());
    }
  }

  @override
  Future<UserModel> signUpwithEmailPasswd({required String name, required String email, required String password}) async{
    try{
      final response=await supabaseClient.auth.signUp(password: password,email: email,data: {'name':name});
      debugPrint('''
      Login Response:
      User: ${response.user?.id}
      Session: ${response.session != null}
      ''');

      if (response.user == null) {
        if (response.session != null) {
          // User is authenticated but might need email verification
          return UserModel.fromJson(response.user!.toJson());
        }
        throw ServerException("User registration incomplete - check email verification");
      }
      return UserModel.fromJson(response.user!.toJson());//id is automatically generated by supabase
    }catch(e){
        throw ServerException(e.toString());
    }
    
  }
  
  @override
  Future<UserModel?> getCurrentUserData() async{
    try{
      if(currentUserSession!=null){
         final userData= await supabaseClient.from('profiles').select().eq('id', currentUserSession!.user.id);
         return UserModel.fromJson(userData.first).copyWith(
          email: currentUserSession!.user.email,
         );
      }
      return null;
    }catch(e){
      throw ServerException(e.toString());
    }
  }
  

}